version: '3.8'

services:
  # Main Music Generation LLM service
  music-llm:
    build: .
    container_name: music-generation-llm
    ports:
      - "8000:8000"
    environment:
      - DEBUG=${DEBUG:-false}
      - HOST=0.0.0.0
      - PORT=8000
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-in-production}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - LLM_MODEL_NAME=${LLM_MODEL_NAME:-gpt-3.5-turbo}
      - MAX_MUSIC_LENGTH=${MAX_MUSIC_LENGTH:-300}
      - DATABASE_URL=${DATABASE_URL:-sqlite:///./music_llm.db}
    volumes:
      - ./output:/app/output
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - music-llm-network

  # Redis for caching and session storage (optional)
  redis:
    image: redis:7-alpine
    container_name: music-llm-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - music-llm-network
    profiles:
      - production

  # PostgreSQL database (optional, alternative to SQLite)
  postgres:
    image: postgres:15-alpine
    container_name: music-llm-postgres
    environment:
      - POSTGRES_DB=music_llm
      - POSTGRES_USER=music_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-music_password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - music-llm-network
    profiles:
      - production

  # Nginx reverse proxy (optional, for production)
  nginx:
    image: nginx:alpine
    container_name: music-llm-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - music-llm
    restart: unless-stopped
    networks:
      - music-llm-network
    profiles:
      - production

  # Prometheus for metrics (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: music-llm-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - music-llm-network
    profiles:
      - production

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: music-llm-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - music-llm-network
    profiles:
      - production

volumes:
  redis_data:
  postgres_data:
  prometheus_data:
  grafana_data:

networks:
  music-llm-network:
    driver: bridge
